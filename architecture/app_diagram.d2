vars: {
  d2-config: {
    sketch: true
    layout-engine: elk
    theme-id: 300
  }
}
direction: right

classes: {
  task: {
    style: {
      fill: lightgreen
    }
  } 
  network_task: {
    style: {
      fill: lightgreen
    }
    height: 100
  } 
  channel: {
    style: {
      fill: pink
    }
    shape: queue
  }
  client: {
    style: {
      fill: yellow
    }
    # height: 150
  }
  ocpp: {
    style: {fill: lightblue}
    height: 100
  }
  network: {
    # width: 550
  }
  app: {
    style: {fill: "#ddddee"}
  }
  legend: {
    style: {
      stroke: "#ddddee"
      fill: "#ddddee"
    }
  }
  charger: {
    label: ""
    shape: image
    icon: "./images/charging-station.png"
    style: {
      fill: "#6699cc"
      stroke: "#6699cc"
    }
  }
  placeholder: {
    label: ""
    style: {
      fill: "#ddddee"
      stroke: "#ddddee"
    }
  }
  placeholder-nested: {
    label: ""
    style: {
      fill: "#eef0fd"
      stroke: "#eef0fd"
    }
    # height: 20
  }
  state-box: {
    width: 120
    height: 40
  }
  state-box-input: {
    width: 120
    height: 40
    style: {
      fill: "#d2dbfd"
    }
  }
  state-box-output: {
    width: 120
    height: 40
    style: {
      fill: "#c3f0ff"
    }
  }
  states: {
    grid-columns: 1
    grid-gap: 5
    height: 300
    style: {
      fill: "#eef0fd"
      stroke: "#eef0fd"
    }    
  }
  code: {
    style: {
      fill: lightgreen
    }
  }
}

Main.class: app
Main: Application Clients, Tasks and Channels {
  grid-columns: 4
  Charger States: {
    grid-columns: 3
    grid-rows: 1
    InputEvents.class: states
    InputEvents {
      InsertCable.class: state-box-input
      RemoveCable.class: state-box-input
      SwipeDetected.class: state-box-input
      Accepted.class: state-box-input
      Rejected.class: state-box-input
    }
    States.class: states
    States {
      available.class: state-box
      available: {style: {fill: lightgreen}}
      occupied.class: state-box
      occupied: {width: 120; style: {fill: lightyellow}}
      authorizing.class: state-box
      authorizing: {width: 120; style: {fill: orange}}
      charging.class: state-box
      charging: {style: {fill: lightblue}}
      faulted.class: state-box
      faulted: {style: {fill: pink}}
    }
    OutputEvents.class: states
    OutputEvents {
      Lock.class: state-box-output
      Unlock.class: state-box-output
      ApplyPower.class: state-box-output
      RemovePower.class: state-box-output
      ShowRejected.class: state-box-output
    }
  }
  Network.class: network
  Network: {
    grid-columns: 1
    grid-gap: 20
    Wifi Connection.class: network_task
    Wifi Connection.box: |md
      Handles opening and reconnecting the wifi connection
    |
    Runner.class: network_task
    Runner.box: |md
      runs embassy's network stack
    |
  }
  NTP CLient.class: client
  NTP CLient.box: |md
    - handles communication with NTP Server
    - uses local timer for time since last sync point 
  |
  NTP Sync.class: task
  NTP Sync.box: |md
    periodically syncs time with NTP Server
  |
  Legend.class: legend
  Legend: {
    grid-rows: 1
    # near: bottom-center
    task.class: task
    channel.class: channel
    client.class: client
    ocpp-task.class: ocpp
  }
  State Machine Handler.class: task
  State Machine Handler.box: |md
    - handles state transitions based on input events
    - uses a finite state machine to manage charger states
    - communicates state changes via State PubSub Channel
  |
  placeholder1.class: placeholder
  placeholder1: {
    height: 50
  }
  Authorization Handler.class: ocpp
  Authorization Handler.box: |md
    - sends Authorize Request to OCPP Server
  |
  Statusnotification Handler.class: ocpp
  Statusnotification Handler.box: |md
    Sends status notification on charger state changes
  |
  Transaction Handler.class: ocpp
  Transaction Handler.box: |md
    - handles OCPP transactions
    - StartTransaction/StopTransaction
  |
  Bootnotification Handler.class: ocpp
  Bootnotification Handler.box: |md
    Sends BootNotification Request on startup
  |
  HeartBeat Handler.class: ocpp
  HeartBeat Handler.box: |md
    Periodically sends Heartbeat Request
  |
  OCPP Response Handler.class: ocpp
  OCPP Response Handler.box: |md
    - receives and handles ocpp responses
    - Also updates transaction id
  |
  ESP32-C6: {
    shape: image
    label: "XIAO ESP32-C6"
    icon: "./images/esp32-c6.png"
    style: {
      fill: "#6699cc"
      stroke: "#6699cc"
    }
    height: 200
  }
  State PubSub Channel.class: channel
  State PubSub Channel.box: |md
     - Threadsafe pubsub channel
     - propagates state changes
     - other tasks subscribe to state changes
  |
  State In Channel.class: channel
  State In Channel.box: |md
    - Threadsafe channel
    - send events that change state
  |
  placeholder2.class: placeholder
  placeholder2: {
    height: 50
  }
  OCPP Send Channel.class: channel
  OCPP Send Channel.box: |md
    - Threadsafe channel
    - Handles outgoing messages
  |
  MQTT Client.class: client
  MQTT Client.box: |md
    - handles communication with an MQTT Broker
    - TODO: Secure connection with TLS
  |
  OCPP Receive Channel.class: channel
  OCPP Receive Channel.box: |md
    - Threadsafe channel
    - handles incoming messages
  |
  Hardware: {
    grid-columns: 2
    grid-rows: 6
    Lock Handler.class: task
    Lock Handler {
      grid-columns: 2
      grid-gap: 20
      Lock2.class: state-box-output
      Lock2: { label: "Lock" }
      Unlock2.class: state-box-output
      Unlock2: {label: "Unlock"}
    }
    Lock Handler.box: |md
      - controls the lock mechanism
      - GPIO21 (going to a solenoid lock)
    |
    Led Handler.class: task
    Led Handler {
      grid-columns: 2
      grid-gap: 20
      state.class: state-box
    }
    Led Handler.box: |md
      - controls multicolor led
      - I2C (GPIO22-23) for now onboard LED GPIO15
    |
    Relais Handler.class: task
    Relais Handler {
      grid-columns: 2
      grid-gap: 20
      ApplyPower2.class: state-box-output
      ApplyPower2: { label: "ApplyPower"}
      RemovePower2.class: state-box-output
      RemovePower2: { label: "RemovePower"}
    }
    Relais Handler.box: |md
      - controls the relais
      - GPIO2
    |
    Swipe Handler.class: task
    Swipe Handler {
      grid-columns: 2
      grid-gap: 20
      SwipeDetected2.class: state-box-input
      SwipeDetected2: { label: "SwipeDetected"}
    }
    Swipe Handler.box: |md
      - Monitors rfid card swipes
      - SPI GPIO17-20) (for now GPIO1)
    |
    Cable Detection Handler.class: task
    Cable Detection Handler {
      grid-columns: 2
      grid-gap: 20
      InsertCable2.class: state-box-input
      InsertCable2: { label: "InsertCable"}
      RemoveCable2.class: state-box-input
      RemoveCable2: { label: "RemoveCable"}
    }
    Cable Detection Handler.box: |md
      - Monitors cable connection status
      - GPIO0
    |
    Display Handler.class: task
    Display Handler.box: |md
      - Display Charger State and Network info
      - runs in main loop
      - I2C (GPIO22-23)
    |
    Lock {
      label: ""
      icon: "./images/padlock.png"
      shape: image
      height: 100
    }
    Led {
      label: ""
      icon: "./images/led.png"
      shape: image
      height: 100
    }
    Relais {
      label: ""
      icon: "./images/circuit.png"
      shape: image
      height: 100
    }
    RFID {
      label: ""
      icon: "./images/money.png"
      shape: image
      height: 100
    }
    Cable {
      label: ""
      icon: "./images/vehicle.png"
      shape: image
      height: 100
    }
    Display {
      label: ""
      icon: "./images/display-frame.png"
      shape: image
      height: 100
    }
  }
  State PubSub Channel -> Hardware.Lock Handler -> Hardware.Lock
  State PubSub Channel -> Hardware.Led Handler -> Hardware.LED
  State PubSub Channel -> Hardware.Relais Handler -> Hardware.Relais
  State In Channel -> State Machine Handler 
  State Machine Handler -> State PubSub Channel
  Hardware.RFID -> Hardware.Swipe Handler -> State In Channel
  Hardware.Cable -> Hardware.Cable Detection Handler -> State In Channel
  Hardware.Display Handler -> Hardware.Display
  OCPP Receive Channel -> OCPP Response Handler -> State In Channel
  State PubSub Channel -> Transaction Handler -> OCPP Send Channel
  NTP Sync -> NTP CLient
  OCPP Send Channel -> MQTT Client -> OCPP Receive Channel
  HeartBeat Handler -> OCPP Send Channel
  Bootnotification Handler -> OCPP Send Channel
  State Machine Handler <-> Charger States
  State PubSub Channel -> Statusnotification Handler -> OCPP Send Channel
  State PubSub Channel -> Authorization Handler -> OCPP Send Channel
}
